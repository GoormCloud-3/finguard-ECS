name: Destroy ECS & ECR Resources (Safe)

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "ÌôòÍ≤Ω ÏÑ†ÌÉù (dev, main)"
        required: true
        default: "dev"
      confirm:
        description: "ÏßÑÏßúÎ°ú ÏÇ≠Ï†úÌïòÎ†§Î©¥ EXACTLY ÏûÖÎ†•: DELETE"
        required: true
        default: "type DELETE"

env:
  AWS_REGION: ap-northeast-2
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  CLUSTER_NAME: ecs-cluster
  SERVICES: account-service,transaction-service,user-service,sqs-service,fcm-service
  REPOS: account-service,transaction-service,user-service,sqs-service,fcm-service,xray-daemon
  FAMILIES: account,sqs,transaction,user,fcm

jobs:
  destroy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Safety check (require DELETE)
        run: |
          set -euo pipefail
          if [ "${{ github.event.inputs.confirm }}" != "DELETE" ]; then
            echo "‚ùå You must type DELETE to proceed." >&2
            exit 1
          fi

      - name: Mask account id
        run: echo "::add-mask::${AWS_ACCOUNT_ID}"

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/ecs-deploy-role
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubECSDestroySession

      - name: Stop & Delete ECS Services (scale to 0 and wait)
        run: |
          set -euo pipefail
          IFS=',' read -ra svcs <<< "$SERVICES"

          # Ï°¥Ïû¨ÌïòÎäî ÏÑúÎπÑÏä§Îßå Ï≤òÎ¶¨
          for svc in "${svcs[@]}"; do
            STATUS=$(aws ecs describe-services --cluster "$CLUSTER_NAME" --services "$svc" \
                      --query "services[0].status" --output text 2>/dev/null || echo "MISSING")
            if [ "$STATUS" = "ACTIVE" ] || [ "$STATUS" = "DRAINING" ]; then
              echo "‚û°Ô∏è  Scaling $svc to 0"
              aws ecs update-service --cluster "$CLUSTER_NAME" --service "$svc" --desired-count 0 >/dev/null

              echo "‚è≥ Waiting for tasks to stop: $svc"
              # Î™®Îì† ÌÉúÏä§ÌÅ¨Í∞Ä Î©àÏ∂ú ÎïåÍπåÏßÄ Î∞òÎ≥µÏ†ÅÏúºÎ°ú ÌôïÏù∏
              for i in $(seq 1 30); do
                TASK_ARNS=$(aws ecs list-tasks --cluster "$CLUSTER_NAME" --service-name "$svc" --desired-status RUNNING --query "taskArns[]" --output text)
                if [ -z "$TASK_ARNS" ] || [ "$TASK_ARNS" = "None" ]; then
                  break
                fi
                sleep 10
              done

              echo "üóëÔ∏è  Deleting service $svc"
              aws ecs delete-service --cluster "$CLUSTER_NAME" --service "$svc" --force >/dev/null || true

              # ÏÑúÎπÑÏä§Í∞Ä ÏÇ¨ÎùºÏßà ÎïåÍπåÏßÄ ÎåÄÍ∏∞
              for i in $(seq 1 18); do
                OUT=$(aws ecs describe-services --cluster "$CLUSTER_NAME" --services "$svc" --query "services[0].status" --output text 2>/dev/null || echo "MISSING")
                if [ "$OUT" = "None" ] || [ "$OUT" = "MISSING" ]; then
                  break
                fi
                sleep 10
              done
            else
              echo "‚ÑπÔ∏è  Service $svc not ACTIVE; skipping"
            fi
          done

      - name: Deregister Task Definitions (all ACTIVE revisions)
        run: |
          set -euo pipefail
          IFS=',' read -ra families <<< "$FAMILIES"

          for fam in "${families[@]}"; do
            echo "‚û°Ô∏è  Deregistering ACTIVE task defs for family: ${fam}-task"
            ARNS=$(aws ecs list-task-definitions --family-prefix "${fam}-task" --status ACTIVE --query "taskDefinitionArns[]" --output text || true)
            if [ -n "$ARNS" ] && [ "$ARNS" != "None" ]; then
              # shellcheck disable=SC2086
              for arn in $ARNS; do
                aws ecs deregister-task-definition --task-definition "$arn" || true
              done
            else
              echo "‚ÑπÔ∏è  No ACTIVE task defs for ${fam}-task"
            fi
          done

      - name: Delete all images in ECR repositories (safer before repo delete)
        run: |
          set -euo pipefail
          IFS=',' read -ra repos <<< "$REPOS"

          for repo in "${repos[@]}"; do
            echo "‚û°Ô∏è  Deleting images in repo: $repo"
            IMG_IDS=$(aws ecr list-images --repository-name "$repo" --query 'imageIds[*]' --output json 2>/dev/null || echo "[]")
            if [ "$IMG_IDS" != "[]" ]; then
              # ÏÇ≠Ï†úÌï† Ïù¥ÎØ∏ÏßÄÍ∞Ä ÎßéÏùÑ Ïàò ÏûàÏúºÎãà Î∞∞ÏπòÎ°ú
              echo "$IMG_IDS" | jq -c '. as $arr | [ $arr[] ]' | while read -r batch; do
                aws ecr batch-delete-image --repository-name "$repo" --image-ids "$batch" >/dev/null || true
              done
            else
              echo "‚ÑπÔ∏è  No images found in $repo"
            fi
          done

      - name: Delete ECR Repositories (force)
        run: |
          set -euo pipefail
          IFS=',' read -ra repos <<< "$REPOS"

          for repo in "${repos[@]}"; do
            echo "üóëÔ∏è  Deleting ECR repo: $repo"
            aws ecr delete-repository --repository-name "$repo" --force >/dev/null || true
          done

      - name: Delete ECS Cluster
        run: |
          set -euo pipefail
          STATUS=$(aws ecs describe-clusters --clusters "$CLUSTER_NAME" --query "clusters[0].status" --output text 2>/dev/null || echo "MISSING")
          if [ "$STATUS" = "ACTIVE" ]; then
            echo "üóëÔ∏è  Deleting cluster: $CLUSTER_NAME"
            aws ecs delete-cluster --cluster "$CLUSTER_NAME" >/dev/null
          else
            echo "‚ÑπÔ∏è  Cluster not ACTIVE or missing; skipping"
          fi
