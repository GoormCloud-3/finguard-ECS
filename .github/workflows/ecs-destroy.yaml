name: ECS Destroy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "환경 선택 (dev, main)"
        required: true
        default: "dev"
      confirm:
        description: "진짜로 삭제하려면 EXACTLY 입력: DELETE"
        required: true
        default: "type DELETE"

env:
  AWS_REGION: ap-northeast-2
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  CLUSTER_NAME: ecs-cluster

  # 서비스/패밀리/리포지토리 목록
  SERVICES: account-service,transaction-service,user-service,sqs-service,fcm-service
  FAMILIES: account,sqs,transaction,user,fcm

  # 🔁 ECR 리포지토리: 각 서비스 + adot-collector (xray-daemon 제거)
  REPOS: account-service,transaction-service,user-service,sqs-service,fcm-service,adot-collector

  # 🗒️ CloudWatch Log Groups (배포 때 만든 것들)
  LOG_GROUPS: /ecs/account-service,/ecs/transaction-service,/ecs/user-service,/ecs/sqs-service,/ecs/fcm-service,/ecs/adot-collector

jobs:
  destroy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Safety check (require DELETE)
        run: |
          set -euo pipefail
          if [ "${{ github.event.inputs.confirm }}" != "DELETE" ]; then
            echo "❌ You must type DELETE to proceed." >&2
            exit 1
          fi

      - name: Mask account id
        run: echo "::add-mask::${AWS_ACCOUNT_ID}"

      # (A) leftover 키/세션 제거
      - name: Clear any leftover AWS credentials
        run: |
          unset AWS_ACCESS_KEY_ID || true
          unset AWS_SECRET_ACCESS_KEY || true
          unset AWS_SESSION_TOKEN || true
          unset AWS_PROFILE || true

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/ecs-destroy-role
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubECSDestroySession

      - name: Who am I? (Caller identity)
        run: |
          set -euo pipefail
          aws sts get-caller-identity

      - name: Ensure tools
        run: |
          set -euo pipefail
          sudo apt-get update -y
          sudo apt-get install -y jq

      # 1) 오토스케일링 정책/타깃 정리(선제 제거 - 선택이지만 깔끔)
      - name: Detach Auto Scaling Policies and Targets
        run: |
          set -euo pipefail
          IFS=',' read -ra svcs <<< "$SERVICES"
          for svc in "${svcs[@]}"; do
            RID="service/${CLUSTER_NAME}/${svc}"

            # 정책 나열 후 삭제
            POLS=$(aws application-autoscaling describe-scaling-policies \
              --service-namespace ecs --resource-id "$RID" \
              --scalable-dimension ecs:service:DesiredCount \
              --query 'ScalingPolicies[].PolicyName' --output text 2>/dev/null || echo "")
            for p in $POLS; do
              aws application-autoscaling delete-scaling-policy \
                --service-namespace ecs --resource-id "$RID" \
                --scalable-dimension ecs:service:DesiredCount \
                --policy-name "$p" || true
            done

            # 스케일러블 타깃 비활성화
            aws application-autoscaling deregister-scalable-target \
              --service-namespace ecs --resource-id "$RID" \
              --scalable-dimension ecs:service:DesiredCount || true
          done

      # 2) 서비스 중지/삭제
      - name: Stop & Delete ECS Services (scale to 0 and wait)
        run: |
          set -euo pipefail
          IFS=',' read -ra svcs <<< "$SERVICES"

          for svc in "${svcs[@]}"; do
            STATUS=$(aws ecs describe-services \
              --cluster "$CLUSTER_NAME" --services "$svc" \
              --region "$AWS_REGION" \
              --query "services[0].status" --output text 2>/dev/null || echo "MISSING")

            if [ "$STATUS" = "ACTIVE" ] || [ "$STATUS" = "DRAINING" ]; then
              echo "➡️  Scaling $svc to 0"
              aws ecs update-service --cluster "$CLUSTER_NAME" --service "$svc" \
                --desired-count 0 --region "$AWS_REGION" >/dev/null || true

              echo "⏳ Waiting for tasks to stop: $svc"
              for i in $(seq 1 36); do
                RUNNING=$(aws ecs describe-services \
                  --cluster "$CLUSTER_NAME" --services "$svc" \
                  --region "$AWS_REGION" \
                  --query 'services[0].runningCount' --output text 2>/dev/null || echo 0)
                [ "$RUNNING" = "0" ] && break
                sleep 10
              done

              echo "🗑️  Deleting service $svc"
              aws ecs delete-service --cluster "$CLUSTER_NAME" --service "$svc" \
                --force --region "$AWS_REGION" >/dev/null || true

              # 완전 삭제까지 대기
              for i in $(seq 1 18); do
                OUT=$(aws ecs describe-services \
                  --cluster "$CLUSTER_NAME" --services "$svc" \
                  --region "$AWS_REGION" \
                  --query "services[0].status" --output text 2>/dev/null || echo "MISSING")
                [ "$OUT" = "MISSING" ] && break
                sleep 10
              done
            else
              echo "ℹ️  Service $svc not ACTIVE; skipping"
            fi
          done

      # 3) 태스크 정의 전부 비활성화 (ACTIVE/INACTIVE 모두)
      - name: Deregister Task Definitions (ALL revisions)
        run: |
          set -euo pipefail
          IFS=',' read -ra families <<< "$FAMILIES"

          for fam in "${families[@]}"; do
            echo "➡️  Deregistering task defs for family: ${fam}-task"
            for STATUS in ACTIVE INACTIVE; do
              ARNS=$(aws ecs list-task-definitions \
                --family-prefix "${fam}-task" --status $STATUS \
                --region "$AWS_REGION" \
                --query "taskDefinitionArns[]" --output text 2>/dev/null || echo "")
              if [ -n "$ARNS" ]; then
                for arn in $ARNS; do
                  aws ecs deregister-task-definition --task-definition "$arn" \
                    --region "$AWS_REGION" || true
                done
              fi
            done
          done

      # 4) ECR 이미지/리포지토리 삭제 (서비스 + adot-collector, xray-daemon 제거됨)
      - name: Delete all images in ECR repositories (paged)
        run: |
          set -euo pipefail
          IFS=',' read -ra repos <<< "$REPOS"

          for repo in "${repos[@]}"; do
            echo "➡️  Deleting images in repo: $repo"
            NEXT=""
            while :; do
              if [ -z "$NEXT" ] || [ "$NEXT" = "None" ]; then
                PAGE=$(aws ecr list-images --repository-name "$repo" \
                        --region "$AWS_REGION" 2>/dev/null || echo '{}')
              else
                PAGE=$(aws ecr list-images --repository-name "$repo" \
                        --region "$AWS_REGION" --next-token "$NEXT" 2>/dev/null || echo '{}')
              fi
              IDS=$(echo "$PAGE" | jq -c '.imageIds // []')
              NEXT=$(echo "$PAGE" | jq -r '.nextToken // "None"')

              if [ "$(echo "$IDS" | jq 'length')" -eq 0 ]; then
                [ "$NEXT" = "None" ] && break || continue
              fi

              aws ecr batch-delete-image \
                --repository-name "$repo" \
                --image-ids "$IDS" \
                --region "$AWS_REGION" >/dev/null || true

              [ "$NEXT" = "None" ] && break
            done
          done

      - name: Delete ECR Repositories (force)
        run: |
          set -euo pipefail
          IFS=',' read -ra repos <<< "$REPOS"
          for repo in "${repos[@]}"; do
            echo "🗑️  Deleting ECR repo: $repo"
            aws ecr delete-repository --repository-name "$repo" \
              --force --region "$AWS_REGION" >/dev/null || true
          done

      # 5) CloudWatch 로그 그룹 삭제 (요청 사항)
      - name: Delete CloudWatch Log Groups (best-effort)
        run: |
          set -euo pipefail
          IFS=',' read -ra lgs <<< "$LOG_GROUPS"
          for lg in "${lgs[@]}"; do
            echo "🗑️  Deleting log group: $lg"
            aws logs delete-log-group --log-group-name "$lg" \
              --region "$AWS_REGION" >/dev/null || true
          done

      # 6) ECS 클러스터 삭제 (마지막)
      - name: Delete ECS Cluster
        run: |
          set -euo pipefail
          STATUS=$(aws ecs describe-clusters \
            --clusters "$CLUSTER_NAME" --region "$AWS_REGION" \
            --query "clusters[0].status" --output text 2>/dev/null || echo "MISSING")
          if [ "$STATUS" = "ACTIVE" ]; then
            echo "🗑️  Deleting cluster: $CLUSTER_NAME"
            aws ecs delete-cluster --cluster "$CLUSTER_NAME" \
              --region "$AWS_REGION" >/dev/null || true
          else
            echo "ℹ️  Cluster not ACTIVE or missing; skipping"
          fi
